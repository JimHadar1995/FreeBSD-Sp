--- /root/src.orig/sys/net/if_gre.c	2017-10-27 16:19:29.450967703 +0300
+++ /root/src.zad1/sys/net/if_gre.c	2017-11-08 18:28:25.950391934 +0300
@@ -34,10 +34,8 @@
 
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: releng/10.3/sys/net/if_gre.c 293410 2016-01-08 02:58:10Z araujo $");
-
 #include "opt_inet.h"
 #include "opt_inet6.h"
-
 #include <sys/param.h>
 #include <sys/jail.h>
 #include <sys/kernel.h>
@@ -57,6 +55,12 @@
 #include <sys/syslog.h>
 #include <sys/systm.h>
 
+#include <sys/syscallsubr.h>
+#include <sys/fcntl.h>
+#include <sys/vnode.h>
+#include <sys/namei.h>
+#include <sys/sbuf.h>
+
 #include <net/ethernet.h>
 #include <net/if.h>
 #include <net/if_clone.h>
@@ -140,6 +144,45 @@
 SYSCTL_INT(_net_link_gre, OID_AUTO, max_nesting, CTLFLAG_RW | CTLFLAG_VNET,
     &VNET_NAME(max_gre_nesting), 0, "Max nested tunnels");
 
+static int read_file(const char *fname, char *buf, int len);
+
+static int read_file(const char *fname, char *buf, int len){
+	struct sbuf *sb;
+	struct nameidata nd;
+	off_t ofs;
+	ssize_t resid;
+	int error, flags;
+
+	NDINIT(&nd, LOOKUP, FOLLOW, UIO_SYSSPACE, fname, curthread);
+	flags = FREAD;
+	error = vn_open(&nd, &flags, 0, NULL);
+	if (error)
+		return (error);
+
+	NDFREE(&nd, NDF_ONLY_PNBUF);
+
+	ofs = 0;
+	sb = sbuf_new_auto();
+	while (1) {
+		error = vn_rdwr(UIO_READ, nd.ni_vp, buf, len, ofs,
+				UIO_SYSSPACE, IO_NODELOCKED, curthread->td_ucred,
+				NOCRED, &resid, curthread);
+		if (error)
+			break;
+		if (resid == len)
+			break;
+		buf[len - resid] = 0;
+		sbuf_printf(sb, "%s", buf);
+		ofs += len - resid;
+  	}
+
+	VOP_UNLOCK(nd.ni_vp, 0);
+	vn_close(nd.ni_vp, FREAD, curthread->td_ucred, curthread);
+
+
+	return (error);
+}
+
 static void
 vnet_gre_init(const void *unused __unused)
 {
@@ -228,7 +271,8 @@
 	switch (cmd) {
 	case SIOCSIFMTU:
 		 /* XXX: */
-		if (ifr->ifr_mtu < 576)
+		//if (ifr->ifr_mtu < 576)
+		if (ifr->ifr_mtu < 1024)
 			return (EINVAL);
 		break;
 	case SIOCSIFADDR:
@@ -565,6 +609,44 @@
 gre_set_tunnel(struct ifnet *ifp, struct sockaddr *src,
     struct sockaddr *dst)
 {
+	char gre_src_deny[] = "/etc/gre_src_deny";
+	char gre_dst_deny[] = "/etc/gre_dst_deny";
+	
+	char buf_src[16];
+	char buf_dst[16];
+
+	//if file gre_src_deny exists
+	if(!read_file(gre_src_deny, buf_src, 15)){
+		printf("\nfile {%s} exists", gre_src_deny);
+		printf("\ngre_src_deny: {%s}", buf_src);
+		//if file gre_dst_deny exists
+		if(!read_file(gre_dst_deny, buf_dst, 15)){
+			printf("\nfile {%s} exists", gre_dst_deny);
+			printf("\ngre_dst_deny: {%s}", buf_dst);
+			
+			char ip_src[INET_ADDRSTRLEN];
+			inet_ntop(AF_INET, &((struct sockaddr_in *)src)->sin_addr, ip_src, INET_ADDRSTRLEN);
+			
+			char *ip_dst = inet_ntoa(((struct sockaddr_in *)dst)->sin_addr);
+			printf("\nip_src: %s", ip_src);
+			printf("\nip_dst: %s", ip_dst);
+			
+			char *is_src = strstr(buf_src, ip_src);
+			char *is_dst = strstr(buf_dst, ip_dst);
+			
+			if(is_src != NULL || is_dst != NULL){
+				return (EAFNOSUPPORT);
+			}
+			
+		}
+		else{
+			printf("\nfile {%s} does not exists", gre_dst_deny);
+		}
+	}
+	else{
+		printf("\nfile {%s} does not exists", gre_src_deny);
+	}
+
 	struct gre_softc *sc, *tsc;
 #ifdef INET6
 	struct ip6_hdr *ip6;
@@ -867,8 +949,14 @@
 static int
 gre_transmit(struct ifnet *ifp, struct mbuf *m)
 {
+
 	GRE_RLOCK_TRACKER;
 	struct gre_softc *sc;
+
+        sc = ifp->if_softc;
+        struct ip greip;
+        greip = sc->gre_oip;
+
 	struct grehdr *gh;
 	uint32_t iaf, oaf, oseq;
 	int error, hlen, olen, plen;
@@ -889,6 +977,7 @@
 		goto drop;
 	}
 	iaf = m->m_pkthdr.csum_data;
+	printf("\nmbuf_csum {%d}", m->m_pkthdr.csum_data);
 	oaf = sc->gre_family;
 	hlen = sc->gre_hlen;
 	want_seq = (sc->gre_options & GRE_ENABLE_SEQ) != 0;
